{
  
    
        "post0": {
            "title": "Target2 Saldos by ECB",
            "content": "import pandas as pd import numpy as np import datetime import matplotlib.pyplot as plt import altair as alt from vega_datasets import data . df_average.columns . Index([&#39;ECB&#39;, &#39;Austria, &#39;, &#39;Belgium, &#39;, &#39;Cyprus, &#39;, &#39;Germany, &#39;, &#39;Estonia, &#39;, &#39;Spain, &#39;, &#39;Finland, &#39;, &#39;France, &#39;, &#39;Greece, &#39;, &#39;Ireland, &#39;, &#39;Italy, &#39;, &#39;Lithuania, &#39;, &#39;Luxembourg, &#39;, &#39;Latvia, &#39;, &#39;Malta, &#39;, &#39;Netherlands, &#39;, &#39;Portugal, &#39;, &#39;Slovenia, &#39;, &#39;Slovakia, &#39;, &#39;Extra Euro area, &#39;], dtype=&#39;object&#39;, name=nan) . Target2 Monthly Average . # Create a selection that chooses the nearest point &amp; selects based on x-value nearest = alt.selection(type=&#39;single&#39;, nearest=True, on=&#39;mouseover&#39;, fields=[&#39;Year / Months&#39;], empty=&#39;none&#39;) # The basic line line = alt.Chart(source).mark_line(interpolate=&#39;basis&#39;).encode( x=&#39;Year / Months:T&#39;, y=&#39;Target2 Saldo:Q&#39;, color=&#39;Central Banks:N&#39; ) . # Transparent selectors across the chart. This is what tells us # the x-value of the cursor selectors = alt.Chart(source).mark_point().encode( x=&#39;Year / Months:T&#39;, opacity=alt.value(0), ).add_selection( nearest ) # Draw points on the line, and highlight based on selection points = line.mark_point().encode( opacity=alt.condition(nearest, alt.value(1), alt.value(0)) ) # Draw text labels near the points, and highlight based on selection text = line.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=alt.condition(nearest, &#39;Target2 Saldo:Q&#39;, alt.value(&#39; &#39;)) ) # Draw a rule at the location of the selection rules = alt.Chart(source).mark_rule(color=&#39;gray&#39;).encode( x=&#39;Year / Months:T&#39;, ).transform_filter( nearest ) # Put the five layers into a chart and bind the data alt.layer( line, selectors, points, rules, text ).properties( width=600, height=300 ) . Target2 Monthly Average since 2001 . selection = alt.selection_multi(fields=[&#39;Central Banks&#39;], bind=&#39;legend&#39;) . line = alt.Chart(source).mark_line(interpolate=&#39;basis&#39;).encode( x=&#39;Year / Months:T&#39;, y=&#39;Target2 Saldo:Q&#39;, color=&#39;Central Banks:N&#39;, opacity=alt.condition(selection, alt.value(1), alt.value(0.2)), tooltip = [alt.Tooltip(&#39;Target2 Saldo&#39;), ] ).add_selection( selection ).interactive().properties( width=800, height=300 ) line .",
            "url": "https://claudia-chehade.github.io/economy_matters/ecb/capital%20flow/target2/2020/08/24/target2.html",
            "relUrl": "/ecb/capital%20flow/target2/2020/08/24/target2.html",
            "date": " • Aug 24, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://claudia-chehade.github.io/economy_matters/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://claudia-chehade.github.io/economy_matters/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://claudia-chehade.github.io/economy_matters/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}